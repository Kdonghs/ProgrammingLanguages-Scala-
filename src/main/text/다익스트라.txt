go to 문은 모든"상위 수준" 프로그래밍 언어(즉, 아마도 일반 기계어 코드를 제외한 모든 것)에서
 폐지되어야 한다고 확신하게 되었습니다

첫 번째 프로그래머의 활동은 프로그래머가 올바른 프로그램을 구성했을 때 끝나지만 
그의 프로그램의 통제 하에 발생하는 프로세스가 그의 활동의 진정한 주체라는 것입니다.
-프로그래머가 작성을 마친 후, 프로세스가 만들기(동작)하기 때문에 프로세스에 최적으로 코드를 작성해야 한다

두 번째 언급은 우리의 지적 능력은 오히려 정적인 관계를 마스터하는 데 적합하고 
시간이 지남에 따라 진화하는 과정을 시각화하는 능력은 상대적으로 잘 발달되지 않았다는 것입니다.
-사람은 동적인 구조보다, 정적인 구조를 이해는데 더 뛰어나다 

-goto문은 직전 문장에서 모호성을 제공할 수 있다.
-재귀 절차를 통해 반복을 표현할 수 있기 때문입니다.
(반복 절은 현재의 유한 장비로 아주 편안하게 구현될 수 있습니다.)
-귀납"으로 알려진 추론 패턴은 반복 절에 의해 생성된 프로세스에 대한 지적 이해를 유지할 수 있는 준비를 갖추게 합니다. 
-그러나 반복 절에 들어갈 때마다 해당하는 현재 반복의 서수를 가차 없이 계산하는 소위 "동적 색인"을 연결할 수 있습니다.
(goto로 exit)
-인덱스의 값이 프로그래머의 제어 범위를 벗어난다는 것입니다.
-프로세스의 진행 상황을 설명하는 독립적인 좌표를 제공합니다.
(for i같은것들)


왜 우리는 그러한 독립적인 좌표가 필요합니까?
-프로세스의 진행과 관련해서만 변수의 값을 해석할 수 있기 때문입니다
-go to 문을 제한 없이 사용 하면 프로세스 진행을 설명하는 의미 있는 좌표 집합을 찾는 것이 매우 어려워집니다
(goto문도 수행된 작업 수를 계산하는 카운터를 통해 진행 상황을 고유하게 설명할 수 있습니다.)
(그러한 좌표(카운터)가 고유하지만 완전히 도움이 되지 않는다는 것)
-이러한 값의 의미를 이해해야 하는 것은 진행 상황과 관련이 있기 때문에 문제의 여지가 없습니다
(목표의 인덱스도 중요하지만 그 외에 인덱스들도 상황을 이해하는데 중요하다)

go to 문 은 그대로 너무 원시적입니다
-모든 요구를 충족한다는 의미에서 완전하다고 주장하지는 않지만 
-제안된 조항은 프로그래머 독립 좌표 시스템이 프로세스를 설명하기 위해 유지될 수 있다는 요구 사항을 충족해야 합니다
(exception이 있을 수 있다)

go to 문의 바람직하지 않다는 언급은 새로운 것이 아닙니다. go to 문의 사용을 알람 종료로 제한하는 명시적 권장 사항을 읽었 지만 추적할 수 없었습니다.

"Go To Statement Considered Harmful"에 대한 요약 및 감상보고서